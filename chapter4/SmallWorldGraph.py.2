""" Code example from Complexity and Computation, a book about
exploring complexity science with Python.  Available free from

http://greenteapress.com/complexity

Copyright 2011 Allen B. Downey.
Distributed under the GNU General Public License at gnu.org/licenses/gpl.html.
"""

import math
import random
import string
import sys

from Heap import Heap
from Graph import Edge, Vertex
from GraphWorld import GraphWorld
from RandomGraph import RandomGraph


def avg(seq):
    return 1.0 * sum(seq) / len(seq)

Inf = float('Inf')

class SmallWorldGraph(RandomGraph):

    def __init__(self, vs, k, p):
        RandomGraph.__init__(self, vs)
        self.add_regular_edges(k=k)
        self.rewire(p=p)
        self.assign_edge_lengths()

    def assign_edge_lengths(self):
        """Gives each edge a length attribute."""
        for e in self.edges():
            e.length = 1

    def shortest_path_tree(self, s, hint=None):
        """Finds the length of the shortest path from Vertex (s) to the
        other Vertices; stores the path lengths as a dist attribute.
        (uses Dijkstra's algorithm).

        In theory this is a bad implementation of Dijkstra's algorithm:
        it keeps the priority queue as a sorted list and re-sorts after
        processing each vertex.

        But in practice this turns out to be pretty good, because Python's
        sort algorithm is fast for lists that are almost sorted.

        hint: a dictionary that maps from tuples (v,w) to already-known
        shortest path length from v to w.
        """
        if hint == None:
            hint = {}

        # initialize distance attribute for each vertex
        for v in self.iterkeys():
            v.dist = hint.get((s, v), Inf)
        s.dist = 0

        # start with all vertices in the queue
        queue = [v for v in self if v.dist < Inf]
        flag = True
        
        while len(queue) > 0:

            # re-sort the queue if necessary, then pop the lowest item
            if flag:
                queue.sort(key=lambda v: v.dist)
            flag = False
            v = queue.pop(0)
            
            # for each neighbor of v, see if we found a new shortest path
            for w, e in self[v].iteritems():
                new = v.dist + e.length
                if w.dist > new:
                    w.dist = new
                    queue.append(w)
                    flag = True
                    
    def shortest_path_tree2(self, s, hint=None):
        """A Heap-based implementation of Dijkstra's algorithm
        based on Connelly Barnes's modification of David Eppstein's
        code at
        http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/119466
        """
        for v in self:
            v.dist = Inf

        queue = Heap([(0, s)])
        
        while len(queue) > 0:

            (cost, v) = queue.popmin()
            if v.dist < Inf: 
                continue
            v.dist = cost
            
            for w, e in self[v].iteritems():
                if w.dist < Inf:
                    continue
                new = v.dist + e.length
                queue.push((new, w))

    def init_all_pairs(self):
        """For the all pairs shortest path algorithms, compute the
        weight dictionary W, where W[i,j] is the length of the edge from
        i to j if there is one, infinity if there isn't and 0 if i==j
        """
        W = {}
        for i, d in enumerate(self.itervalues()):
            for j, w in enumerate(self.iterkeys()):
                try:
                    W[i,j] = d[w].length
                except:
                    W[i,j] = Inf
            W[i,i] = 0
        return W

    def extend_shortest_paths(self, D, W):
        """Multiply the path dictionary D by the weight dictionary W.
        This is part of the 'repeated squaring' algorithm.
        See Cormen Leiserson and Rivest, page 554.
        """
        indices = range(len(self))
        E = {}
        for i in indices:
            for j in indices:
                t = [D[i,k] + W